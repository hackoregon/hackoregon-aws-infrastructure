Description: >
    ECS Service - HackOregon Budget API
Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    ConfigBucket:
        Description: The configuration bucket we want to use
        Type: String

    DeployTarget:
        Description: Which environment (Valid Values - integration, production)
        Type: String

    ProjSettingsDir:
        Description: the relative directory path where we keep the app config
        Type: String

    Host:
        Description: The host path to register with the Application Load Balancer
        Type: String
        Default: 2017.civicpdx.org

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /2017

Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
                - ContainerName: "civic-2017-service"
                  ContainerPort: 3000
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: civic-2017-service
            ContainerDefinitions:
                - Name: civic-2017-service
                  Essential: true
                  Image: 845828040396.dkr.ecr.us-west-2.amazonaws.com/production/civic-2017:latest
                  Memory: 100
                  PortMappings:
                    - ContainerPort: 3000
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 45
            HealthCheckPath: /2017/
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 40
            HealthyThresholdCount: 4
            UnhealthyThresholdCount: 5

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 96
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref Path
                - Field: host-header
                  Values:
                    - !Ref Host
 
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }
